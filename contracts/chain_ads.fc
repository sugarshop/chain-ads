#include "imports/stdlib.fc";


const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::upload_ad = "op::upload_ad"c;
const op::send_ton = "op::send_ton"c;

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;

global slice ctx_ad_tags;
global slice ctx_wallet_address;
global cell  ctx_labels_dict;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    if (ds.slice_empty?()) {
        ;; Initialize with default values if the data cell is empty
        ctx_id = 0;
        ctx_counter = 0;
        ctx_ad_tags = begin_cell().end_cell().begin_parse();
        ctx_wallet_address = begin_cell().end_cell().begin_parse();
        ctx_labels_dict = new_dict();
    } else {
        ;; Load data as before
        ctx_id = ds~load_uint(32);
        ctx_counter = ds~load_uint(32);
        
        ;; Load ad_tags, use empty slice if reference is absent
        if (ds.slice_refs() > 0) {
            ctx_ad_tags = ds~load_ref().begin_parse();
        } else {
            ctx_ad_tags = begin_cell().end_cell().begin_parse();
        }
        
        ;; Load wallet_address, use empty slice if reference is absent
        if (ds.slice_refs() > 0) {
            ctx_wallet_address = ds~load_ref().begin_parse();
        } else {
            ctx_wallet_address = begin_cell().end_cell().begin_parse();
        }

        ;; Load labels_dict, use empty slice if reference is absent
        if (ds.slice_refs() > 0) {
            ctx_labels_dict = ds~load_dict();
        } else {
            ctx_labels_dict = new_dict();
        }
    }
    ds.end_parse();
    ctx_ad_tags.end_parse();
    ctx_wallet_address.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .store_ref(begin_cell().store_slice(ctx_ad_tags).end_cell())
            .store_ref(begin_cell().store_slice(ctx_wallet_address).end_cell())
            .store_dict(ctx_labels_dict)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        save_data();
        return ();
    }
    if(op == op::upload_ad) {
        ;; at least 2 arguments
        throw_unless(60, in_msg_body.slice_refs() >= 2);
        
        cell ad_tags_cell = in_msg_body~load_ref();
        cell wallet_address_cell = in_msg_body~load_ref();

        ctx_ad_tags = ad_tags_cell.begin_parse();
        ctx_wallet_address = wallet_address_cell.begin_parse();

        int wallet_address_hash = slice_hash(ctx_wallet_address);

        ctx_labels_dict~udict_set_ref(256, wallet_address_hash, ad_tags_cell);

        ;; check data availablity.
        throw_if(61, ctx_ad_tags.slice_empty?());
        throw_if(62, ctx_wallet_address.slice_empty?());
        
        (_, int key_exists) = ctx_labels_dict.udict_get?(256, wallet_address_hash);
        throw_if(63, ~ key_exists);

        save_data();
        return ();
    }
    if (op == op::send_ton) {
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        
        throw_unless(402, my_balance >= amount);

        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 107)
            .store_uint(0, 32)
            .end_cell();

        send_raw_message(msg, 1);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

slice get_ad_tags() method_id {
    load_data();
    return ctx_ad_tags;
}

slice get_wallet_address() method_id {
    load_data();
    return ctx_wallet_address;
}

cell get_labels() method_id {
    load_data();
    ;; return a default value.
    if (ctx_wallet_address.slice_empty?()) {
        return begin_cell().store_uint(0, 32).end_cell().begin_parse();
    }
    return ctx_wallet_address;
}

cell get_labels() method_id {
    load_data();
    ;; return a default value.
    if (dict_empty?(ctx_labels_dict)) {
        return new_dict();
    }
    return ctx_labels_dict;
}
